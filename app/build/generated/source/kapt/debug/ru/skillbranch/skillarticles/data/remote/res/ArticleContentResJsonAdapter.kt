// Code generated by moshi-kotlin-codegen. Do not edit.
package ru.skillbranch.skillarticles.data.remote.res

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import java.util.Date
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class ArticleContentResJsonAdapter(
  moshi: Moshi
) : JsonAdapter<ArticleContentRes>() {
  private val options: JsonReader.Options = JsonReader.Options.of("articleId", "content", "source",
      "shareLink", "updatedAt")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "articleId")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "source")

  private val dateAdapter: JsonAdapter<Date> = moshi.adapter(Date::class.java, emptySet(),
      "updatedAt")

  @Volatile
  private var constructorRef: Constructor<ArticleContentRes>? = null

  override fun toString(): String = buildString(39) {
      append("GeneratedJsonAdapter(").append("ArticleContentRes").append(')') }

  override fun fromJson(reader: JsonReader): ArticleContentRes {
    var articleId: String? = null
    var content: String? = null
    var source: String? = null
    var shareLink: String? = null
    var updatedAt: Date? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> articleId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("articleId",
            "articleId", reader)
        1 -> content = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("content",
            "content", reader)
        2 -> {
          source = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> shareLink = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("shareLink",
            "shareLink", reader)
        4 -> {
          updatedAt = dateAdapter.fromJson(reader) ?: throw Util.unexpectedNull("updatedAt",
              "updatedAt", reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<ArticleContentRes> = this.constructorRef ?:
        ArticleContentRes::class.java.getDeclaredConstructor(String::class.java, String::class.java,
        String::class.java, String::class.java, Date::class.java, Int::class.javaPrimitiveType,
        Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
    return localConstructor.newInstance(
        articleId ?: throw Util.missingProperty("articleId", "articleId", reader),
        content ?: throw Util.missingProperty("content", "content", reader),
        source,
        shareLink ?: throw Util.missingProperty("shareLink", "shareLink", reader),
        updatedAt,
        mask0,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: ArticleContentRes?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("articleId")
    stringAdapter.toJson(writer, value.articleId)
    writer.name("content")
    stringAdapter.toJson(writer, value.content)
    writer.name("source")
    nullableStringAdapter.toJson(writer, value.source)
    writer.name("shareLink")
    stringAdapter.toJson(writer, value.shareLink)
    writer.name("updatedAt")
    dateAdapter.toJson(writer, value.updatedAt)
    writer.endObject()
  }
}
